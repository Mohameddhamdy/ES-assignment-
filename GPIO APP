C
#include <stdio.h>
#include "stm32f4xx.h"

#define ENCODER_PORT        GPIOA
#define ENCODER_PIN_A       GPIO_PIN_0
#define ENCODER_PIN_B       GPIO_PIN_1

volatile int encoderCount = 0;

void EXTI0_IRQHandler(void)
{
    if (EXTI->PR & EXTI_PR_PR0) {
        // Check the state of the B pin to determine the direction
        if (GPIOA->IDR & ENCODER_PIN_B) {
            encoderCount++;
        } else {
            encoderCount--;
        }

        EXTI->PR = EXTI_PR_PR0;  // Clear the interrupt flag
    }
}

void EXTI1_IRQHandler(void)
{
    if (EXTI->PR & EXTI_PR_PR1) {
        // Check the state of the A pin to determine the direction
        if (GPIOA->IDR & ENCODER_PIN_A) {
            encoderCount--;
        } else {
            encoderCount++;
        }

        EXTI->PR = EXTI_PR_PR1;  // Clear the interrupt flag
    }
}

void GPIO_Init(void)
{
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;  // Enable GPIOA clock

    GPIO_InitTypeDef GPIO_InitStruct;

    // Configure Encoder Pins as input with pull-up resistors
    GPIO_InitStruct.Pin = ENCODER_PIN_A | ENCODER_PIN_B;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(ENCODER_PORT, &GPIO_InitStruct);

    // Configure EXTI interrupts for Encoder Pins
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
    HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);

    // Connect EXTI0 and EXTI1 to Encoder Pins
    SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;
    SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI1_PA;

    // Enable rising and falling edge trigger for EXTI0 and EXTI1
    EXTI->RTSR |= EXTI_RTSR_TR0;
    EXTI->FTSR |= EXTI_FTSR_TR0;
    EXTI->RTSR |= EXTI_RTSR_TR1;
    EXTI->FTSR |= EXTI_FTSR_TR1;
}

int main(void)
{
    // Initialize GPIO
    GPIO_Init();

    while (1) {
        // Perform your application logic here
        printf("Encoder Count: %d\n", encoderCount);
        // Delay or perform other tasks as needed
    }
}
